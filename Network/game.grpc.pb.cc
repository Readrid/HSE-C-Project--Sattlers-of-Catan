// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: game.proto

#include "game.pb.h"
#include "game.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace game {

static const char* Network_method_names[] = {
  "/game.Network/StartNewGame",
  "/game.Network/JoinGame",
  "/game.Network/SendEvent",
  "/game.Network/GetEvent",
  "/game.Network/HasEvent",
};

std::unique_ptr< Network::Stub> Network::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Network::Stub> stub(new Network::Stub(channel));
  return stub;
}

Network::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartNewGame_(Network_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_JoinGame_(Network_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SendEvent_(Network_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetEvent_(Network_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_HasEvent_(Network_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Network::Stub::StartNewGame(::grpc::ClientContext* context, const ::game::NumberOfPlayers& request, ::game::OrderInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartNewGame_, context, request, response);
}

void Network::Stub::experimental_async::StartNewGame(::grpc::ClientContext* context, const ::game::NumberOfPlayers* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartNewGame_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::StartNewGame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartNewGame_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::StartNewGame(::grpc::ClientContext* context, const ::game::NumberOfPlayers* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartNewGame_, context, request, response, reactor);
}

void Network::Stub::experimental_async::StartNewGame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartNewGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* Network::Stub::AsyncStartNewGameRaw(::grpc::ClientContext* context, const ::game::NumberOfPlayers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::OrderInfo>::Create(channel_.get(), cq, rpcmethod_StartNewGame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* Network::Stub::PrepareAsyncStartNewGameRaw(::grpc::ClientContext* context, const ::game::NumberOfPlayers& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::OrderInfo>::Create(channel_.get(), cq, rpcmethod_StartNewGame_, context, request, false);
}

::grpc::Status Network::Stub::JoinGame(::grpc::ClientContext* context, const ::game::GameId& request, ::game::OrderInfo* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_JoinGame_, context, request, response);
}

void Network::Stub::experimental_async::JoinGame(::grpc::ClientContext* context, const ::game::GameId* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::JoinGame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::JoinGame(::grpc::ClientContext* context, const ::game::GameId* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, reactor);
}

void Network::Stub::experimental_async::JoinGame(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::OrderInfo* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_JoinGame_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* Network::Stub::AsyncJoinGameRaw(::grpc::ClientContext* context, const ::game::GameId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::OrderInfo>::Create(channel_.get(), cq, rpcmethod_JoinGame_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::game::OrderInfo>* Network::Stub::PrepareAsyncJoinGameRaw(::grpc::ClientContext* context, const ::game::GameId& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::OrderInfo>::Create(channel_.get(), cq, rpcmethod_JoinGame_, context, request, false);
}

::grpc::Status Network::Stub::SendEvent(::grpc::ClientContext* context, const ::game::Event& request, ::game::Void* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendEvent_, context, request, response);
}

void Network::Stub::experimental_async::SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::SendEvent(::grpc::ClientContext* context, const ::game::Event* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, reactor);
}

void Network::Stub::experimental_async::SendEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Void* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_SendEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::Void>* Network::Stub::AsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Void>::Create(channel_.get(), cq, rpcmethod_SendEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::game::Void>* Network::Stub::PrepareAsyncSendEventRaw(::grpc::ClientContext* context, const ::game::Event& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Void>::Create(channel_.get(), cq, rpcmethod_SendEvent_, context, request, false);
}

::grpc::Status Network::Stub::GetEvent(::grpc::ClientContext* context, const ::game::Player& request, ::game::Event* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetEvent_, context, request, response);
}

void Network::Stub::experimental_async::GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::GetEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEvent_, context, request, response, reactor);
}

void Network::Stub::experimental_async::GetEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Event* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_GetEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::Event>* Network::Stub::AsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Event>::Create(channel_.get(), cq, rpcmethod_GetEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::game::Event>* Network::Stub::PrepareAsyncGetEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Event>::Create(channel_.get(), cq, rpcmethod_GetEvent_, context, request, false);
}

::grpc::Status Network::Stub::HasEvent(::grpc::ClientContext* context, const ::game::Player& request, ::game::Bool* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_HasEvent_, context, request, response);
}

void Network::Stub::experimental_async::HasEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::HasEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Bool* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_HasEvent_, context, request, response, std::move(f));
}

void Network::Stub::experimental_async::HasEvent(::grpc::ClientContext* context, const ::game::Player* request, ::game::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasEvent_, context, request, response, reactor);
}

void Network::Stub::experimental_async::HasEvent(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::game::Bool* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_HasEvent_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::game::Bool>* Network::Stub::AsyncHasEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Bool>::Create(channel_.get(), cq, rpcmethod_HasEvent_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::game::Bool>* Network::Stub::PrepareAsyncHasEventRaw(::grpc::ClientContext* context, const ::game::Player& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::game::Bool>::Create(channel_.get(), cq, rpcmethod_HasEvent_, context, request, false);
}

Network::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::game::NumberOfPlayers, ::game::OrderInfo>(
          std::mem_fn(&Network::Service::StartNewGame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::game::GameId, ::game::OrderInfo>(
          std::mem_fn(&Network::Service::JoinGame), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::game::Event, ::game::Void>(
          std::mem_fn(&Network::Service::SendEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::game::Player, ::game::Event>(
          std::mem_fn(&Network::Service::GetEvent), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Network_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Network::Service, ::game::Player, ::game::Bool>(
          std::mem_fn(&Network::Service::HasEvent), this)));
}

Network::Service::~Service() {
}

::grpc::Status Network::Service::StartNewGame(::grpc::ServerContext* context, const ::game::NumberOfPlayers* request, ::game::OrderInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::JoinGame(::grpc::ServerContext* context, const ::game::GameId* request, ::game::OrderInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::SendEvent(::grpc::ServerContext* context, const ::game::Event* request, ::game::Void* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::GetEvent(::grpc::ServerContext* context, const ::game::Player* request, ::game::Event* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Network::Service::HasEvent(::grpc::ServerContext* context, const ::game::Player* request, ::game::Bool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace game

